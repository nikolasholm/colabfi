<div class="cursor-wrapper">
    <svg class="cursor" width="220" height="220" viewBox="0 0 220 220">
        <defs>
            <filter id="cursor-filter">
                <feGaussianBlur in="SourceGraphic" stdDeviation="15" result="blur" />
                <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 35 -15" result="goo" />
                <feComposite in="SourceGraphic" in2="goo" operator="atop" />
            </filter>
        </defs>
        <g filter="url(#cursor-filter)">
            <circle class="cursor-circle" cx="110" cy="110" r="20"/>
            <circle class="cursor-circle" cx="110" cy="110" r="20"/>
            <circle class="cursor-circle" cx="110" cy="110" r="20"/>
            <circle class="cursor-circle" cx="110" cy="110" r="20"/>
            <circle class="cursor-circle" cx="110" cy="110" r="20"/>
        </g>
    </svg>
</div>

<style>
.cursor-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    pointer-events: none;
    z-index: 9999;
    width: 100%;
    height: 100vh;
}

.cursor {
    position: absolute;
    fill: white;
    opacity: 0.5;
    transform: translate(-50%, -50%);
}

.cursor-circle {
    fill: white;
    opacity: 0.5;
}
</style>

<script>
    function initCursor() {
        const cursor = document.querySelector('.cursor');
        const circles = [...document.querySelectorAll('.cursor-circle')];
        let mouseX = 0;
        let mouseY = 0;
        let currentX = 0;
        let currentY = 0;
        let animationFrame;

        function lerp(start, end, factor) {
            return start + (end - start) * factor;
        }

        function animate() {
            currentX = lerp(currentX, mouseX, 0.2);
            currentY = lerp(currentY, mouseY, 0.2);
            
            if (cursor) {
                cursor.style.transform = `translate(${currentX}px, ${currentY}px)`;

                circles.forEach((circle, i) => {
                    if (i === 0) return;
                    
                    setTimeout(() => {
                        const prev = circles[i - 1].getBoundingClientRect();
                        circle.setAttribute('cx', prev.x + prev.width/2);
                        circle.setAttribute('cy', prev.y + prev.height/2);
                    }, i * 50);
                });
            }

            animationFrame = requestAnimationFrame(animate);
        }

        function handleMouseMove(e) {
            mouseX = e.clientX;
            mouseY = e.clientY;
        }

        // Start animation
        window.addEventListener('mousemove', handleMouseMove);
        animate();

        // Cleanup function
        return () => {
            window.removeEventListener('mousemove', handleMouseMove);
            cancelAnimationFrame(animationFrame);
        };
    }

    // Initialize when the script runs
    let cleanup = initCursor();

    // Re-initialize on document visibility change
    document.addEventListener('visibilitychange', () => {
        if (cleanup) cleanup();
        if (!document.hidden) {
            cleanup = initCursor();
        }
    });
</script> 